service:
  name: ts-api-test-tom

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  appSync:
    name: ${self:custom.stage}-cognito-api
    authenticationType: API_KEY
    mappingTemplates:
      - dataSource: GetMobileUserByPhone
        type: Query
        field: getMobileUserByPhone
        request: "getMobileUserByPhone-request.vtl"
        response: "getMobileUserByPhone-response.vtl"
      # - dataSource: SetPassword
      #   type: Mutation
      #   field: setPassword
      #   request: 'setPassword-request.vtl'
      #   response: 'setPassword-response.vtl'
    dataSources:
      - type: AWS_LAMBDA
        name: GetMobileUserByPhone
        config:
          functionName: getMobileUserByPhone

provider:
  name: aws
  runtime: nodejs8.10
  stage: test
  region: ap-northeast-1
  memorySize: 128
  timeout: 9

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - "*"
        # - 'arn:aws:sts::#{AWS::AccountId}:assumed-role/*'
      # Resource:
      # - 'arn:aws:sts::461716780826:assumed-role/ts-api-test-tom-dev1-ap-northeast-1-lambdaRole/ts-api-test-tom-dev1-jsAwsSnsFunc'
    - Effect: "Allow"
      Action:
        - "cognito-idp:ListUsers"
      Resource:
        - "arn:aws:cognito-idp:ap-northeast-1:461716780826:userpool/ap-northeast-1_iH1FAARf3"
        # - "arn:aws:cognito-idp:ap-southeast-1:461716780826:userpool/ap-southeast-1_ntfECmrjH"

functions:
  tsHelloFunc:
    handler: handler.helloTsFunc
    events:
      - http:
          method: get
          path: hello

  jsAddFunc:
    handler: jsadd.addus
    events:
      - http:
          path: math/js-add/{operation}
          method: post
          integration: lambda
          cors: true

  tsAddFunc:
    handler: tsadd.tsAddUs
    events:
      - http:
          path: math/ts-add/{operation}
          method: post
          # integration: lambda-proxy
          integration: lambda
          cors: true

  tsAwsSnsFunc:
    handler: functions/testAwsSns.handleSNS
    events:
      - http:
          path: sns/send
          method: post
          cors: true

  jsAwsSnsFunc:
    handler: functions/publishSNS.publishSnsTest
    events:
      - http:
          path: sns/jssend
          method: post
          cors: true

  tsresizeImagesFunc:
    handler: functions/tsresizeImages.handlerS3
    events:
      - http:
          path: s3test/allfiles
          method: get
          integration: lambda
          cors: true
      - s3:
          bucket: tom-photos
          # event: s3:ObjectCreated:*
          event: s3:ObjectCreated:Put
          rules:
            - prefix: uploads/
            - suffix: .png
      - s3:
          bucket: tom-photos-dest
          event: s3:ObjectCreated:*
          rules:
            - prefix: tests/
            - suffix: .docx

  getMobileUserByPhone:
    handler: functions/getMobileUserByPhone.handler

resources:
  # DynamoDB
  # - ${file(resources/general.yml)}
  # S3
  # - ${file(resources/s3-bucket.yml)}
