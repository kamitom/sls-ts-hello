service:
  name: ts-api-tom

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-plugin-additional-stacks

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  appSync:
    name: ${self:custom.stage}-cognito-api
    authenticationType: API_KEY
    mappingTemplates:
      - dataSource: GetMobileUserByPhone
        type: Query
        field: getMobileUserByPhone
        request: "getMobileUserByPhone-request.vtl"
        response: "getMobileUserByPhone-response.vtl"
      # - dataSource: SetPassword
      #   type: Mutation
      #   field: setPassword
      #   request: 'setPassword-request.vtl'
      #   response: 'setPassword-response.vtl'
    dataSources:
      - type: AWS_LAMBDA
        name: GetMobileUserByPhone
        config:
          functionName: getMobileUserByPhone
  additionalStacks:
    tomLogsStack:
      Resources:
        WriteDashPostLogGroup:
          Type: AWS::Logs::LogGroup
          Properties:
            LogGroupName: ${self:service}-${self:custom.stage}-Logs
    permanentS3Stack1:
      Resources:
        S3BucketData:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:custom.stage}-s3-photo
    permanentS3Stack2:
      Resources:
        S3BucketData:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:custom.stage}-s3-photo-dest
    dbStack:
      Resources:
        MyCustomTodosDynamoDbTable:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            AttributeDefinitions:
              -
                AttributeName: id
                AttributeType: S
            KeySchema:
              -
                AttributeName: id
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            TableName: ${self:custom.stage}-sns-custom-table

provider:
  name: aws
  runtime: nodejs8.10
  stage: test
  region: ap-northeast-1
  memorySize: 128
  timeout: 9

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - "*"
    - Effect: Allow
      Action:
        # - s3:*
        - s3:Get*
        - s3:List*
        - s3:Put*
      Resource:
        # - "*"
        - "arn:aws:s3:::tom-photos/*"
        - "arn:aws:s3:::tom-photos-dest/*"
    - Effect: "Allow"
      Action:
        - "cognito-idp:ListUsers"
      Resource:
        - "arn:aws:cognito-idp:${self:custom.region}:#{AWS::AccountId}:userpool/*"

functions:
  tsHelloFunc:
    handler: handler.helloTsFunc
    events:
      - http:
          method: get
          path: hello

  jsAddFunc:
    handler: jsadd.addus
    events:
      - http:
          path: math/js-add/{operation}
          method: post
          integration: lambda
          cors: true

  tsAddFunc:
    handler: tsadd.tsAddUs
    events:
      - http:
          path: math/ts-add/{operation}
          method: post
          # integration: lambda-proxy
          integration: lambda
          cors: true

  tsAwsSnsFunc:
    handler: functions/testAwsSns.handleSNS
    events:
      - http:
          path: sns/send
          method: post
          cors: true

  jsAwsSnsFunc:
    handler: functions/publishSNS.publishSnsTest
    events:
      - http:
          path: sns/jssend
          method: post
          cors: true

  tsresizeImagesFunc:
    handler: functions/tsresizeImages.handlerS3
    events:
      - http:
          path: s3test/upload
          method: get
          integration: lambda
          cors: true
      - s3:
          bucket: tom-photos
          # event: s3:ObjectCreated:*
          event: s3:ObjectCreated:Put
          rules:
            - prefix: uploads/
            - suffix: .png
      - s3:
          bucket: tom-photos-dest
          event: s3:ObjectCreated:*
          rules:
            - prefix: tests/
            - suffix: .docx

  getMobileUserByPhone:
    handler: functions/getMobileUserByPhone.handler

resources:
  # DynamoDB
  # - ${file(resources/general.yml)}
  # S3
  # - ${file(resources/s3-bucket.yml)}
  # S3 - permission
  # - ${file(resources/s3-permission.yml)}
